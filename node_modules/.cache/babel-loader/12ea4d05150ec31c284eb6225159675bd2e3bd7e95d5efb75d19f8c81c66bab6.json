{"ast":null,"code":"import debugIt from \"debug\";\nimport { p, v } from \"./_chunks/defaultOptionsValidator.js\";\nimport { isPlainObject } from \"is-plain-object\";\nfunction agent(opts) {\n  return {};\n}\nconst leadingSlash = /^\\//,\n  trailingSlash = /\\/$/;\nfunction base(baseUrl) {\n  const baseUri = baseUrl.replace(trailingSlash, \"\");\n  return {\n    processOptions: options => {\n      if (/^https?:\\/\\//i.test(options.url)) return options;\n      const url = [baseUri, options.url.replace(leadingSlash, \"\")].join(\"/\");\n      return Object.assign({}, options, {\n        url\n      });\n    }\n  };\n}\nconst SENSITIVE_HEADERS = [\"cookie\", \"authorization\"],\n  hasOwn = Object.prototype.hasOwnProperty,\n  redactKeys = (source, redacted) => {\n    const target = {};\n    for (const key in source) hasOwn.call(source, key) && (target[key] = redacted.indexOf(key.toLowerCase()) > -1 ? \"<redacted>\" : source[key]);\n    return target;\n  };\nfunction debug(opts = {}) {\n  const verbose = opts.verbose,\n    namespace = opts.namespace || \"get-it\",\n    defaultLogger = debugIt(namespace),\n    log = opts.log || defaultLogger,\n    shortCircuit = log === defaultLogger && !debugIt.enabled(namespace);\n  let requestId = 0;\n  return {\n    processOptions: options => (options.debug = log, options.requestId = options.requestId || ++requestId, options),\n    onRequest: event => {\n      if (shortCircuit || !event) return event;\n      const options = event.options;\n      if (log(\"[%s] HTTP %s %s\", options.requestId, options.method, options.url), verbose && options.body && typeof options.body == \"string\" && log(\"[%s] Request body: %s\", options.requestId, options.body), verbose && options.headers) {\n        const headers2 = opts.redactSensitiveHeaders === !1 ? options.headers : redactKeys(options.headers, SENSITIVE_HEADERS);\n        log(\"[%s] Request headers: %s\", options.requestId, JSON.stringify(headers2, null, 2));\n      }\n      return event;\n    },\n    onResponse: (res, context) => {\n      if (shortCircuit || !res) return res;\n      const reqId = context.options.requestId;\n      return log(\"[%s] Response code: %s %s\", reqId, res.statusCode, res.statusMessage), verbose && res.body && log(\"[%s] Response body: %s\", reqId, stringifyBody(res)), res;\n    },\n    onError: (err, context) => {\n      const reqId = context.options.requestId;\n      return err ? (log(\"[%s] ERROR: %s\", reqId, err.message), err) : (log(\"[%s] Error encountered, but handled by an earlier middleware\", reqId), err);\n    }\n  };\n}\nfunction stringifyBody(res) {\n  return (res.headers[\"content-type\"] || \"\").toLowerCase().indexOf(\"application/json\") !== -1 ? tryFormat(res.body) : res.body;\n}\nfunction tryFormat(body) {\n  try {\n    const parsed = typeof body == \"string\" ? JSON.parse(body) : body;\n    return JSON.stringify(parsed, null, 2);\n  } catch {\n    return body;\n  }\n}\nfunction headers(_headers, opts = {}) {\n  return {\n    processOptions: options => {\n      const existing = options.headers || {};\n      return options.headers = opts.override ? Object.assign({}, existing, _headers) : Object.assign({}, _headers, existing), options;\n    }\n  };\n}\nclass HttpError extends Error {\n  constructor(res, ctx) {\n    super();\n    const truncatedUrl = res.url.length > 400 ? `${res.url.slice(0, 399)}\\u2026` : res.url;\n    let msg = `${res.method}-request to ${truncatedUrl} resulted in `;\n    msg += `HTTP ${res.statusCode} ${res.statusMessage}`, this.message = msg.trim(), this.response = res, this.request = ctx.options;\n  }\n}\nfunction httpErrors() {\n  return {\n    onResponse: (res, ctx) => {\n      if (!(res.statusCode >= 400)) return res;\n      throw new HttpError(res, ctx);\n    }\n  };\n}\nfunction injectResponse(opts = {}) {\n  if (typeof opts.inject != \"function\") throw new Error(\"`injectResponse` middleware requires a `inject` function\");\n  return {\n    interceptRequest: function (prevValue, event) {\n      const response = opts.inject(event, prevValue);\n      if (!response) return prevValue;\n      const options = event.context.options;\n      return {\n        body: \"\",\n        url: options.url,\n        method: options.method,\n        headers: {},\n        statusCode: 200,\n        statusMessage: \"OK\",\n        ...response\n      };\n    }\n  };\n}\nconst isBuffer = typeof Buffer > \"u\" ? () => !1 : obj => Buffer.isBuffer(obj),\n  serializeTypes = [\"boolean\", \"string\", \"number\"];\nfunction jsonRequest() {\n  return {\n    processOptions: options => {\n      const body = options.body;\n      return !body || !(typeof body.pipe != \"function\" && !isBuffer(body) && (serializeTypes.indexOf(typeof body) !== -1 || Array.isArray(body) || isPlainObject(body))) ? options : Object.assign({}, options, {\n        body: JSON.stringify(options.body),\n        headers: Object.assign({}, options.headers, {\n          \"Content-Type\": \"application/json\"\n        })\n      });\n    }\n  };\n}\nfunction jsonResponse(opts) {\n  return {\n    onResponse: response => {\n      const contentType = response.headers[\"content-type\"] || \"\",\n        shouldDecode = opts && opts.force || contentType.indexOf(\"application/json\") !== -1;\n      return !response.body || !contentType || !shouldDecode ? response : Object.assign({}, response, {\n        body: tryParse(response.body)\n      });\n    },\n    processOptions: options => Object.assign({}, options, {\n      headers: Object.assign({\n        Accept: \"application/json\"\n      }, options.headers)\n    })\n  };\n  function tryParse(body) {\n    try {\n      return JSON.parse(body);\n    } catch (err) {\n      throw err.message = `Failed to parsed response body as JSON: ${err.message}`, err;\n    }\n  }\n}\nfunction isBrowserOptions(options) {\n  return typeof options == \"object\" && options !== null && !(\"protocol\" in options);\n}\nfunction mtls(config = {}) {\n  if (!config.ca) throw new Error('Required mtls option \"ca\" is missing');\n  if (!config.cert) throw new Error('Required mtls option \"cert\" is missing');\n  if (!config.key) throw new Error('Required mtls option \"key\" is missing');\n  return {\n    finalizeOptions: options => {\n      if (isBrowserOptions(options)) return options;\n      const mtlsOpts = {\n        cert: config.cert,\n        key: config.key,\n        ca: config.ca\n      };\n      return Object.assign({}, options, mtlsOpts);\n    }\n  };\n}\nlet actualGlobal = {};\ntypeof globalThis < \"u\" ? actualGlobal = globalThis : typeof window < \"u\" ? actualGlobal = window : typeof global < \"u\" ? actualGlobal = global : typeof self < \"u\" && (actualGlobal = self);\nvar global$1 = actualGlobal;\nfunction observable(opts = {}) {\n  const Observable =\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any -- @TODO consider dropping checking for a global Observable since it's not on a standards track\n  opts.implementation || global$1.Observable;\n  if (!Observable) throw new Error(\"`Observable` is not available in global scope, and no implementation was passed\");\n  return {\n    onReturn: (channels, context) => new Observable(observer => (channels.error.subscribe(err => observer.error(err)), channels.progress.subscribe(event => observer.next(Object.assign({\n      type: \"progress\"\n    }, event))), channels.response.subscribe(response => {\n      observer.next(Object.assign({\n        type: \"response\"\n      }, response)), observer.complete();\n    }), channels.request.publish(context), () => channels.abort.publish()))\n  };\n}\nfunction progress() {\n  return {\n    onRequest: evt => {\n      if (evt.adapter !== \"xhr\") return;\n      const xhr = evt.request,\n        context = evt.context;\n      \"upload\" in xhr && \"onprogress\" in xhr.upload && (xhr.upload.onprogress = handleProgress(\"upload\")), \"onprogress\" in xhr && (xhr.onprogress = handleProgress(\"download\"));\n      function handleProgress(stage) {\n        return event => {\n          const percent = event.lengthComputable ? event.loaded / event.total * 100 : -1;\n          context.channels.progress.publish({\n            stage,\n            percent,\n            total: event.total,\n            loaded: event.loaded,\n            lengthComputable: event.lengthComputable\n          });\n        };\n      }\n    }\n  };\n}\nconst promise = (options = {}) => {\n  const PromiseImplementation = options.implementation || Promise;\n  if (!PromiseImplementation) throw new Error(\"`Promise` is not available in global scope, and no implementation was passed\");\n  return {\n    onReturn: (channels, context) => new PromiseImplementation((resolve, reject) => {\n      const cancel = context.options.cancelToken;\n      cancel && cancel.promise.then(reason => {\n        channels.abort.publish(reason), reject(reason);\n      }), channels.error.subscribe(reject), channels.response.subscribe(response => {\n        resolve(options.onlyBody ? response.body : response);\n      }), setTimeout(() => {\n        try {\n          channels.request.publish(context);\n        } catch (err) {\n          reject(err);\n        }\n      }, 0);\n    })\n  };\n};\nclass Cancel {\n  constructor(message) {\n    this.__CANCEL__ = !0, this.message = message;\n  }\n  toString() {\n    return `Cancel${this.message ? `: ${this.message}` : \"\"}`;\n  }\n}\nconst _CancelToken = class {\n  constructor(executor) {\n    if (typeof executor != \"function\") throw new TypeError(\"executor must be a function.\");\n    let resolvePromise = null;\n    this.promise = new Promise(resolve => {\n      resolvePromise = resolve;\n    }), executor(message => {\n      this.reason || (this.reason = new Cancel(message), resolvePromise(this.reason));\n    });\n  }\n};\n_CancelToken.source = () => {\n  let cancel;\n  return {\n    token: new _CancelToken(can => {\n      cancel = can;\n    }),\n    cancel\n  };\n};\nlet CancelToken = _CancelToken;\nconst isCancel = value => !!(value && value != null && value.__CANCEL__);\npromise.Cancel = Cancel;\npromise.CancelToken = CancelToken;\npromise.isCancel = isCancel;\nfunction proxy(_proxy) {\n  if (_proxy !== !1 && (!_proxy || !_proxy.host)) throw new Error(\"Proxy middleware takes an object of host, port and auth properties\");\n  return {\n    processOptions: options => Object.assign({\n      proxy: _proxy\n    }, options)\n  };\n}\nvar defaultShouldRetry = (err, attempt, options) => options.method !== \"GET\" && options.method !== \"HEAD\" ? !1 : err.isNetworkError || !1;\nconst isStream = stream => stream !== null && typeof stream == \"object\" && typeof stream.pipe == \"function\";\nvar sharedRetry = opts => {\n  const maxRetries = opts.maxRetries || 5,\n    retryDelay = opts.retryDelay || getRetryDelay,\n    allowRetry = opts.shouldRetry;\n  return {\n    onError: (err, context) => {\n      const options = context.options,\n        max = options.maxRetries || maxRetries,\n        shouldRetry = options.shouldRetry || allowRetry,\n        attemptNumber = options.attemptNumber || 0;\n      if (isStream(options.body) || !shouldRetry(err, attemptNumber, options) || attemptNumber >= max) return err;\n      const newContext = Object.assign({}, context, {\n        options: Object.assign({}, options, {\n          attemptNumber: attemptNumber + 1\n        })\n      });\n      return setTimeout(() => context.channels.request.publish(newContext), retryDelay(attemptNumber)), null;\n    }\n  };\n};\nfunction getRetryDelay(attemptNum) {\n  return 100 * Math.pow(2, attemptNum) + Math.random() * 100;\n}\nconst retry = (opts = {}) => sharedRetry({\n  shouldRetry: defaultShouldRetry,\n  ...opts\n});\nretry.shouldRetry = defaultShouldRetry;\nfunction encode(data) {\n  const query = new URLSearchParams(),\n    nest = (name, _value) => {\n      const value = _value instanceof Set ? Array.from(_value) : _value;\n      if (Array.isArray(value)) {\n        if (value.length) for (const index in value) nest(`${name}[${index}]`, value[index]);else query.append(`${name}[]`, \"\");\n      } else if (typeof value == \"object\" && value !== null) for (const [key, obj] of Object.entries(value)) nest(`${name}[${key}]`, obj);else query.append(name, value);\n    };\n  for (const [key, value] of Object.entries(data)) nest(key, value);\n  return query.toString();\n}\nfunction urlEncoded() {\n  return {\n    processOptions: options => {\n      const body = options.body;\n      return !body || !(typeof body.pipe != \"function\" && !isBuffer(body) && isPlainObject(body)) ? options : {\n        ...options,\n        body: encode(options.body),\n        headers: {\n          ...options.headers,\n          \"Content-Type\": \"application/x-www-form-urlencoded\"\n        }\n      };\n    }\n  };\n}\nfunction buildKeepAlive(agent2) {\n  return function (config = {}) {\n    const ms = config.ms || 1e3,\n      maxFree = config.maxFree || 256;\n    return agent2({\n      keepAlive: !0,\n      keepAliveMsecs: ms,\n      maxFreeSockets: maxFree\n    });\n  };\n}\nconst keepAlive = buildKeepAlive(agent);\nexport { Cancel, CancelToken, agent, base, debug, headers, httpErrors, injectResponse, jsonRequest, jsonResponse, keepAlive, mtls, observable, p as processOptions, progress, promise, proxy, retry, urlEncoded, v as validateOptions };","map":{"version":3,"names":["agent","opts","leadingSlash","trailingSlash","base","baseUrl","baseUri","replace","processOptions","options","test","url","join","Object","assign","SENSITIVE_HEADERS","hasOwn","prototype","hasOwnProperty","redactKeys","source","redacted","target","key","call","indexOf","toLowerCase","debug","verbose","namespace","defaultLogger","debugIt","log","shortCircuit","enabled","requestId","onRequest","event","method","body","headers","headers2","redactSensitiveHeaders","JSON","stringify","onResponse","res","context","reqId","statusCode","statusMessage","stringifyBody","onError","err","message","tryFormat","parsed","parse","_headers","existing","override","HttpError","Error","constructor","ctx","truncatedUrl","length","slice","msg","trim","response","request","httpErrors","injectResponse","inject","interceptRequest","prevValue","isBuffer","Buffer","obj","serializeTypes","jsonRequest","pipe","Array","isArray","isPlainObject","jsonResponse","contentType","shouldDecode","force","tryParse","Accept","isBrowserOptions","mtls","config","ca","cert","finalizeOptions","mtlsOpts","actualGlobal","globalThis","window","global","self","global$1","observable","Observable","implementation","onReturn","channels","observer","error","subscribe","progress","next","type","complete","publish","abort","evt","adapter","xhr","upload","onprogress","handleProgress","stage","percent","lengthComputable","loaded","total","promise","PromiseImplementation","Promise","resolve","reject","cancel","cancelToken","then","reason","onlyBody","setTimeout","Cancel","__CANCEL__","toString","_CancelToken","executor","TypeError","resolvePromise","token","can","CancelToken","isCancel","value","proxy","_proxy","host","defaultShouldRetry","attempt","isNetworkError","isStream","stream","sharedRetry","maxRetries","retryDelay","getRetryDelay","allowRetry","shouldRetry","max","attemptNumber","newContext","attemptNum","Math","pow","random","retry","encode","data","query","URLSearchParams","nest","name","_value","Set","from","index","append","entries","urlEncoded","buildKeepAlive","agent2","ms","maxFree","keepAlive","keepAliveMsecs","maxFreeSockets"],"sources":["/Users/donkeydesktop/Desktop/MERN COURSE/Personal projects/puffy project/BusyBee/node_modules/get-it/src/middleware/agent/browser-agent.ts","/Users/donkeydesktop/Desktop/MERN COURSE/Personal projects/puffy project/BusyBee/node_modules/get-it/src/middleware/base.ts","/Users/donkeydesktop/Desktop/MERN COURSE/Personal projects/puffy project/BusyBee/node_modules/get-it/src/middleware/debug.ts","/Users/donkeydesktop/Desktop/MERN COURSE/Personal projects/puffy project/BusyBee/node_modules/get-it/src/middleware/headers.ts","/Users/donkeydesktop/Desktop/MERN COURSE/Personal projects/puffy project/BusyBee/node_modules/get-it/src/middleware/httpErrors.ts","/Users/donkeydesktop/Desktop/MERN COURSE/Personal projects/puffy project/BusyBee/node_modules/get-it/src/middleware/injectResponse.ts","/Users/donkeydesktop/Desktop/MERN COURSE/Personal projects/puffy project/BusyBee/node_modules/get-it/src/util/isBuffer.ts","/Users/donkeydesktop/Desktop/MERN COURSE/Personal projects/puffy project/BusyBee/node_modules/get-it/src/middleware/jsonRequest.ts","/Users/donkeydesktop/Desktop/MERN COURSE/Personal projects/puffy project/BusyBee/node_modules/get-it/src/middleware/jsonResponse.ts","/Users/donkeydesktop/Desktop/MERN COURSE/Personal projects/puffy project/BusyBee/node_modules/get-it/src/util/isBrowserOptions.ts","/Users/donkeydesktop/Desktop/MERN COURSE/Personal projects/puffy project/BusyBee/node_modules/get-it/src/middleware/mtls.ts","/Users/donkeydesktop/Desktop/MERN COURSE/Personal projects/puffy project/BusyBee/node_modules/get-it/src/util/global.ts","/Users/donkeydesktop/Desktop/MERN COURSE/Personal projects/puffy project/BusyBee/node_modules/get-it/src/middleware/observable.ts","/Users/donkeydesktop/Desktop/MERN COURSE/Personal projects/puffy project/BusyBee/node_modules/get-it/src/middleware/progress/browser-progress.ts","/Users/donkeydesktop/Desktop/MERN COURSE/Personal projects/puffy project/BusyBee/node_modules/get-it/src/middleware/promise.ts","/Users/donkeydesktop/Desktop/MERN COURSE/Personal projects/puffy project/BusyBee/node_modules/get-it/src/middleware/proxy.ts","/Users/donkeydesktop/Desktop/MERN COURSE/Personal projects/puffy project/BusyBee/node_modules/get-it/src/util/browser-shouldRetry.ts","/Users/donkeydesktop/Desktop/MERN COURSE/Personal projects/puffy project/BusyBee/node_modules/get-it/src/middleware/retry/shared-retry.ts","/Users/donkeydesktop/Desktop/MERN COURSE/Personal projects/puffy project/BusyBee/node_modules/get-it/src/middleware/retry/browser-retry.ts","/Users/donkeydesktop/Desktop/MERN COURSE/Personal projects/puffy project/BusyBee/node_modules/get-it/src/middleware/urlEncoded.ts","/Users/donkeydesktop/Desktop/MERN COURSE/Personal projects/puffy project/BusyBee/node_modules/get-it/src/middleware/keepAlive.ts","/Users/donkeydesktop/Desktop/MERN COURSE/Personal projects/puffy project/BusyBee/node_modules/get-it/src/middleware.browser.ts"],"sourcesContent":["/**\n * This middleware only has an effect in Node.js.\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport function agent(opts?: any): any {\n  return {}\n}\n","import type {Middleware} from '../types'\n\nconst leadingSlash = /^\\//\nconst trailingSlash = /\\/$/\n\n/** @public */\nexport function base(baseUrl: string) {\n  const baseUri = baseUrl.replace(trailingSlash, '')\n  return {\n    processOptions: (options) => {\n      if (/^https?:\\/\\//i.test(options.url)) {\n        return options // Already prefixed\n      }\n\n      const url = [baseUri, options.url.replace(leadingSlash, '')].join('/')\n      return Object.assign({}, options, {url})\n    },\n  } satisfies Middleware\n}\n","import debugIt from 'debug'\n\nimport type {Middleware} from '../types'\n\nconst SENSITIVE_HEADERS = ['cookie', 'authorization']\n\nconst hasOwn = Object.prototype.hasOwnProperty\nconst redactKeys = (source: any, redacted: any) => {\n  const target: any = {}\n  for (const key in source) {\n    if (hasOwn.call(source, key)) {\n      target[key] = redacted.indexOf(key.toLowerCase()) > -1 ? '<redacted>' : source[key]\n    }\n  }\n  return target\n}\n\n/** @public */\nexport function debug(opts: any = {}) {\n  const verbose = opts.verbose\n  const namespace = opts.namespace || 'get-it'\n  const defaultLogger = debugIt(namespace)\n  const log = opts.log || defaultLogger\n  const shortCircuit = log === defaultLogger && !debugIt.enabled(namespace)\n  let requestId = 0\n\n  return {\n    processOptions: (options) => {\n      options.debug = log\n      options.requestId = options.requestId || ++requestId\n      return options\n    },\n\n    onRequest: (event) => {\n      // Short-circuit if not enabled, to save some CPU cycles with formatting stuff\n      if (shortCircuit || !event) {\n        return event\n      }\n\n      const options = event.options\n\n      log('[%s] HTTP %s %s', options.requestId, options.method, options.url)\n\n      if (verbose && options.body && typeof options.body === 'string') {\n        log('[%s] Request body: %s', options.requestId, options.body)\n      }\n\n      if (verbose && options.headers) {\n        const headers =\n          opts.redactSensitiveHeaders === false\n            ? options.headers\n            : redactKeys(options.headers, SENSITIVE_HEADERS)\n\n        log('[%s] Request headers: %s', options.requestId, JSON.stringify(headers, null, 2))\n      }\n\n      return event\n    },\n\n    onResponse: (res, context) => {\n      // Short-circuit if not enabled, to save some CPU cycles with formatting stuff\n      if (shortCircuit || !res) {\n        return res\n      }\n\n      const reqId = context.options.requestId\n\n      log('[%s] Response code: %s %s', reqId, res.statusCode, res.statusMessage)\n\n      if (verbose && res.body) {\n        log('[%s] Response body: %s', reqId, stringifyBody(res))\n      }\n\n      return res\n    },\n\n    onError: (err, context) => {\n      const reqId = context.options.requestId\n      if (!err) {\n        log('[%s] Error encountered, but handled by an earlier middleware', reqId)\n        return err\n      }\n\n      log('[%s] ERROR: %s', reqId, err.message)\n      return err\n    },\n  } satisfies Middleware\n}\n\nfunction stringifyBody(res: any) {\n  const contentType = (res.headers['content-type'] || '').toLowerCase()\n  const isJson = contentType.indexOf('application/json') !== -1\n  return isJson ? tryFormat(res.body) : res.body\n}\n\n// Attempt pretty-formatting JSON\nfunction tryFormat(body: any) {\n  try {\n    const parsed = typeof body === 'string' ? JSON.parse(body) : body\n    return JSON.stringify(parsed, null, 2)\n  } catch (err) {\n    return body\n  }\n}\n","import type {Middleware} from '../types'\n\n/** @public */\nexport function headers(_headers: any, opts: any = {}) {\n  return {\n    processOptions: (options) => {\n      const existing = options.headers || {}\n      options.headers = opts.override\n        ? Object.assign({}, existing, _headers)\n        : Object.assign({}, _headers, existing)\n\n      return options\n    },\n  } satisfies Middleware\n}\n","import type {Middleware} from '../types'\n\nclass HttpError extends Error {\n  response: any\n  request: any\n  constructor(res: any, ctx: any) {\n    super()\n    const truncatedUrl = res.url.length > 400 ? `${res.url.slice(0, 399)}…` : res.url\n    let msg = `${res.method}-request to ${truncatedUrl} resulted in `\n    msg += `HTTP ${res.statusCode} ${res.statusMessage}`\n\n    this.message = msg.trim()\n    this.response = res\n    this.request = ctx.options\n  }\n}\n\n/** @public */\nexport function httpErrors() {\n  return {\n    onResponse: (res, ctx) => {\n      const isHttpError = res.statusCode >= 400\n      if (!isHttpError) {\n        return res\n      }\n\n      throw new HttpError(res, ctx)\n    },\n  } satisfies Middleware\n}\n","import type {Middleware, MiddlewareHooks, MiddlewareResponse} from '../types'\n\n/** @public */\nexport function injectResponse(\n  opts: {\n    inject: (\n      event: Parameters<MiddlewareHooks['interceptRequest']>[1],\n      prevValue: Parameters<MiddlewareHooks['interceptRequest']>[0],\n    ) => Partial<MiddlewareResponse | undefined | void>\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  } = {} as any,\n) {\n  if (typeof opts.inject !== 'function') {\n    throw new Error('`injectResponse` middleware requires a `inject` function')\n  }\n\n  const inject = function inject(prevValue, event) {\n    const response = opts.inject(event, prevValue)\n    if (!response) {\n      return prevValue\n    }\n\n    // Merge defaults so we don't have to provide the most basic of details unless we want to\n    const options = event.context.options\n    return {\n      body: '',\n      url: options.url,\n      method: options.method!,\n      headers: {},\n      statusCode: 200,\n      statusMessage: 'OK',\n      ...response,\n    } satisfies MiddlewareResponse\n  } satisfies Middleware['interceptRequest']\n\n  return {interceptRequest: inject} satisfies Middleware\n}\n","export const isBuffer =\n  typeof Buffer === 'undefined' ? () => false : (obj: unknown) => Buffer.isBuffer(obj)\n","import {isPlainObject} from 'is-plain-object'\n\nimport type {Middleware} from '../types'\nimport {isBuffer} from '../util/isBuffer'\n\nconst serializeTypes = ['boolean', 'string', 'number']\n\n/** @public */\nexport function jsonRequest() {\n  return {\n    processOptions: (options) => {\n      const body = options.body\n      if (!body) {\n        return options\n      }\n\n      const isStream = typeof body.pipe === 'function'\n      const shouldSerialize =\n        !isStream &&\n        !isBuffer(body) &&\n        (serializeTypes.indexOf(typeof body) !== -1 || Array.isArray(body) || isPlainObject(body))\n\n      if (!shouldSerialize) {\n        return options\n      }\n\n      return Object.assign({}, options, {\n        body: JSON.stringify(options.body),\n        headers: Object.assign({}, options.headers, {\n          'Content-Type': 'application/json',\n        }),\n      })\n    },\n  } satisfies Middleware\n}\n","import type {Middleware} from '../types'\n\n/** @public */\nexport function jsonResponse(opts?: any) {\n  return {\n    onResponse: (response) => {\n      const contentType = response.headers['content-type'] || ''\n      const shouldDecode = (opts && opts.force) || contentType.indexOf('application/json') !== -1\n      if (!response.body || !contentType || !shouldDecode) {\n        return response\n      }\n\n      return Object.assign({}, response, {body: tryParse(response.body)})\n    },\n\n    processOptions: (options) =>\n      Object.assign({}, options, {\n        headers: Object.assign({Accept: 'application/json'}, options.headers),\n      }),\n  } satisfies Middleware\n\n  function tryParse(body: any) {\n    try {\n      return JSON.parse(body)\n    } catch (err: any) {\n      err.message = `Failed to parsed response body as JSON: ${err.message}`\n      throw err\n    }\n  }\n}\n","import type {RequestOptions} from '../types'\n\nexport function isBrowserOptions(options: unknown): options is RequestOptions {\n  return typeof options === 'object' && options !== null && !('protocol' in options)\n}\n","import type {Middleware} from '../types'\nimport {isBrowserOptions} from '../util/isBrowserOptions'\n\n/** @public */\nexport function mtls(config: any = {}) {\n  if (!config.ca) {\n    throw new Error('Required mtls option \"ca\" is missing')\n  }\n  if (!config.cert) {\n    throw new Error('Required mtls option \"cert\" is missing')\n  }\n  if (!config.key) {\n    throw new Error('Required mtls option \"key\" is missing')\n  }\n\n  return {\n    finalizeOptions: (options) => {\n      if (isBrowserOptions(options)) {\n        return options\n      }\n\n      const mtlsOpts = {\n        cert: config.cert,\n        key: config.key,\n        ca: config.ca,\n      }\n      return Object.assign({}, options, mtlsOpts)\n    },\n  } satisfies Middleware\n}\n","let actualGlobal = {} as typeof globalThis\n\nif (typeof globalThis !== 'undefined') {\n  actualGlobal = globalThis\n} else if (typeof window !== 'undefined') {\n  actualGlobal = window\n} else if (typeof global !== 'undefined') {\n  actualGlobal = global\n} else if (typeof self !== 'undefined') {\n  actualGlobal = self\n}\n\nexport default actualGlobal\n","import type {Middleware} from '../types'\nimport global from '../util/global'\n\n/** @public */\nexport function observable(\n  opts: {\n    implementation?: any\n  } = {},\n) {\n  const Observable =\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any -- @TODO consider dropping checking for a global Observable since it's not on a standards track\n    opts.implementation || (global as any).Observable\n  if (!Observable) {\n    throw new Error(\n      '`Observable` is not available in global scope, and no implementation was passed',\n    )\n  }\n\n  return {\n    onReturn: (channels, context) =>\n      new Observable((observer: any) => {\n        channels.error.subscribe((err) => observer.error(err))\n        channels.progress.subscribe((event) =>\n          observer.next(Object.assign({type: 'progress'}, event)),\n        )\n        channels.response.subscribe((response) => {\n          observer.next(Object.assign({type: 'response'}, response))\n          observer.complete()\n        })\n\n        channels.request.publish(context)\n        return () => channels.abort.publish()\n      }),\n  } satisfies Middleware\n}\n","import type {Middleware} from '../../types'\n\nexport function progress() {\n  return {\n    onRequest: (evt) => {\n      if (evt.adapter !== 'xhr') {\n        return\n      }\n\n      const xhr = evt.request\n      const context = evt.context\n\n      if ('upload' in xhr && 'onprogress' in xhr.upload) {\n        xhr.upload.onprogress = handleProgress('upload')\n      }\n\n      if ('onprogress' in xhr) {\n        xhr.onprogress = handleProgress('download')\n      }\n\n      function handleProgress(stage: 'download' | 'upload') {\n        return (event: any) => {\n          const percent = event.lengthComputable ? (event.loaded / event.total) * 100 : -1\n          context.channels.progress.publish({\n            stage,\n            percent,\n            total: event.total,\n            loaded: event.loaded,\n            lengthComputable: event.lengthComputable,\n          })\n        }\n      }\n    },\n  } satisfies Middleware\n}\n","import type {Middleware} from '../types'\n\n/** @public */\nexport const promise = (\n  options: {onlyBody?: boolean; implementation?: PromiseConstructor} = {},\n) => {\n  const PromiseImplementation = options.implementation || Promise\n  if (!PromiseImplementation) {\n    throw new Error('`Promise` is not available in global scope, and no implementation was passed')\n  }\n\n  return {\n    onReturn: (channels, context) =>\n      new PromiseImplementation((resolve, reject) => {\n        const cancel = context.options.cancelToken\n        if (cancel) {\n          cancel.promise.then((reason: any) => {\n            channels.abort.publish(reason)\n            reject(reason)\n          })\n        }\n\n        channels.error.subscribe(reject)\n        channels.response.subscribe((response) => {\n          resolve(options.onlyBody ? (response as any).body : response)\n        })\n\n        // Wait until next tick in case cancel has been performed\n        setTimeout(() => {\n          try {\n            channels.request.publish(context)\n          } catch (err) {\n            reject(err)\n          }\n        }, 0)\n      }),\n  } satisfies Middleware\n}\n\n/**\n * The cancel token API is based on the [cancelable promises proposal](https://github.com/tc39/proposal-cancelable-promises), which is currently at Stage 1.\n *\n * Code shamelessly stolen/borrowed from MIT-licensed [axios](https://github.com/mzabriskie/axios). Thanks to [Nick Uraltsev](https://github.com/nickuraltsev), [Matt Zabriskie](https://github.com/mzabriskie) and the other contributors of that project!\n */\n/** @public */\nexport class Cancel {\n  __CANCEL__ = true\n\n  message: string | undefined\n\n  constructor(message: string | undefined) {\n    this.message = message\n  }\n\n  toString() {\n    return `Cancel${this.message ? `: ${this.message}` : ''}`\n  }\n}\n\n/** @public */\nexport class CancelToken {\n  promise: Promise<any>\n  reason?: Cancel\n\n  constructor(executor: (cb: (message?: string) => void) => void) {\n    if (typeof executor !== 'function') {\n      throw new TypeError('executor must be a function.')\n    }\n\n    let resolvePromise: any = null\n\n    this.promise = new Promise((resolve) => {\n      resolvePromise = resolve\n    })\n\n    executor((message?: string) => {\n      if (this.reason) {\n        // Cancellation has already been requested\n        return\n      }\n\n      this.reason = new Cancel(message)\n      resolvePromise(this.reason)\n    })\n  }\n\n  static source = () => {\n    let cancel: (message?: string) => void\n    const token = new CancelToken((can) => {\n      cancel = can\n    })\n\n    return {\n      token: token,\n      cancel: cancel!,\n    }\n  }\n}\n\nconst isCancel = (value: any): value is Cancel => !!(value && value?.__CANCEL__)\n\npromise.Cancel = Cancel\npromise.CancelToken = CancelToken\npromise.isCancel = isCancel\n","import type {Middleware} from '../types'\n\n/** @public */\nexport function proxy(_proxy: any) {\n  if (_proxy !== false && (!_proxy || !_proxy.host)) {\n    throw new Error('Proxy middleware takes an object of host, port and auth properties')\n  }\n\n  return {\n    processOptions: (options) => Object.assign({proxy: _proxy}, options),\n  } satisfies Middleware\n}\n","export default (err: any, attempt: any, options: any) => {\n  if (options.method !== 'GET' && options.method !== 'HEAD') {\n    return false\n  }\n\n  return err.isNetworkError || false\n}\n","import type {Middleware, RetryOptions} from '../../types'\n\nconst isStream = (stream: any) =>\n  stream !== null && typeof stream === 'object' && typeof stream.pipe === 'function'\n\n/** @public */\nexport default (opts: RetryOptions) => {\n  const maxRetries = opts.maxRetries || 5\n  const retryDelay = opts.retryDelay || getRetryDelay\n  const allowRetry = opts.shouldRetry\n\n  return {\n    onError: (err, context) => {\n      const options = context.options\n      const max = options.maxRetries || maxRetries\n      const shouldRetry = options.shouldRetry || allowRetry\n      const attemptNumber = options.attemptNumber || 0\n\n      // We can't retry if body is a stream, since it'll be drained\n      if (isStream(options.body)) {\n        return err\n      }\n\n      // Give up?\n      if (!shouldRetry(err, attemptNumber, options) || attemptNumber >= max) {\n        return err\n      }\n\n      // Create a new context with an increased attempt number, so we can exit if we reach a limit\n      const newContext = Object.assign({}, context, {\n        options: Object.assign({}, options, {attemptNumber: attemptNumber + 1}),\n      })\n\n      // Wait a given amount of time before doing the request again\n      setTimeout(() => context.channels.request.publish(newContext), retryDelay(attemptNumber))\n\n      // Signal that we've handled the error and that it should not propagate further\n      return null\n    },\n  } satisfies Middleware\n}\n\nfunction getRetryDelay(attemptNum: number) {\n  return 100 * Math.pow(2, attemptNum) + Math.random() * 100\n}\n","import type {RetryOptions} from '../../types'\nimport defaultShouldRetry from '../../util/browser-shouldRetry'\nimport sharedRetry from './shared-retry'\n\n/** @public */\nexport const retry = (opts: Partial<RetryOptions> = {}) =>\n  sharedRetry({shouldRetry: defaultShouldRetry, ...opts})\n\nretry.shouldRetry = defaultShouldRetry\n","import {isPlainObject} from 'is-plain-object'\n\nimport type {Middleware} from '../types'\nimport {isBuffer} from '../util/isBuffer'\n\nfunction encode(data: Record<string, string | Set<number | string>>): string {\n  const query = new URLSearchParams()\n\n  const nest = (name: string, _value: unknown) => {\n    const value = _value instanceof Set ? Array.from(_value) : _value\n    if (Array.isArray(value)) {\n      if (value.length) {\n        for (const index in value) {\n          nest(`${name}[${index}]`, value[index])\n        }\n      } else {\n        query.append(`${name}[]`, '')\n      }\n    } else if (typeof value === 'object' && value !== null) {\n      for (const [key, obj] of Object.entries(value)) {\n        nest(`${name}[${key}]`, obj)\n      }\n    } else {\n      query.append(name, value as string)\n    }\n  }\n\n  for (const [key, value] of Object.entries(data)) {\n    nest(key, value)\n  }\n\n  return query.toString()\n}\n\n/** @public */\nexport function urlEncoded() {\n  return {\n    processOptions: (options) => {\n      const body = options.body\n      if (!body) {\n        return options\n      }\n\n      const isStream = typeof body.pipe === 'function'\n      const shouldSerialize = !isStream && !isBuffer(body) && isPlainObject(body)\n\n      if (!shouldSerialize) {\n        return options\n      }\n\n      return {\n        ...options,\n        body: encode(options.body),\n        headers: {\n          ...options.headers,\n          'Content-Type': 'application/x-www-form-urlencoded',\n        },\n      }\n    },\n  } satisfies Middleware\n}\n","export function buildKeepAlive(agent: any) {\n  return function keepAlive(config: any = {}): any {\n    const ms = config.ms || 1000\n    const maxFree = config.maxFree || 256\n    const agentOptions = {\n      keepAlive: true,\n      keepAliveMsecs: ms,\n      maxFreeSockets: maxFree,\n    }\n\n    return agent(agentOptions)\n  }\n}\n","export * from './middleware/agent/browser-agent'\nexport * from './middleware/base'\nexport * from './middleware/debug'\nexport * from './middleware/defaultOptionsProcessor'\nexport * from './middleware/defaultOptionsValidator'\nexport * from './middleware/headers'\nexport * from './middleware/httpErrors'\nexport * from './middleware/injectResponse'\nexport * from './middleware/jsonRequest'\nexport * from './middleware/jsonResponse'\nexport * from './middleware/mtls'\nexport * from './middleware/observable'\nexport * from './middleware/progress/browser-progress'\nexport * from './middleware/promise'\nexport * from './middleware/proxy'\nexport * from './middleware/retry/browser-retry'\nexport * from './middleware/urlEncoded'\nexport type * from './types'\n\nimport {agent} from './middleware/agent/browser-agent'\nimport {buildKeepAlive} from './middleware/keepAlive'\n/** @public */\nexport const keepAlive = buildKeepAlive(agent)\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}